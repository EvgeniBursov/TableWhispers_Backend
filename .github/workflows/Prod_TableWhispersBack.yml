# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - TableWhispersBack

on:
  push:
    branches:
      - main
      - Prod
  pull_request:
    branches:
      - main
      - Prod
  workflow_dispatch:

env:
  NODE_ENV: test
  JWT_SECRET: ${{ secrets.JWT_SECRET || 'test-jwt-secret-key-for-ci' }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    permissions:
      contents: read
      checks: write
      pull-requests: write

    strategy:
      matrix:
        node-version: ['20.x']
        # You can add more versions if needed: ['18.x', '20.x']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          # Install additional test dependencies if needed
          npm list --depth=0

      - name: Lint code (if you have linting)
        run: |
          # Add this if you have ESLint configured
          # npm run lint
          echo "Linting step (configure ESLint if needed)"

      - name: Run all tests
        run: |
          echo "Running comprehensive test suite..."
          npm test
        env:
          NODE_ENV: test

      - name: Run Chat System Tests Specifically
        run: |
          echo "Running Chat System tests..."
          npm run test:chat-all
        env:
          NODE_ENV: test

      - name: Run tests with coverage
        run: |
          echo "Generating coverage reports..."
          npm run test:coverage
        env:
          NODE_ENV: test

      - name: Upload coverage reports to Codecov (optional)
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '20.x'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            coverage/
            test-results.xml
          retention-days: 30

      - name: Comment Test Results on PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            let testStatus = '‚úÖ All tests passed!';
            
            // You can customize this to read actual test results
            const comment = `
            ## üß™ Test Results
            
            ${testStatus}
            
            ### Test Summary:
            - ‚úÖ Unit Tests: Chat System
            - ‚úÖ Integration Tests: Chat Routes  
            - ‚úÖ Route Tests: Chat API
            - ‚úÖ Coverage: Generated
            
            ### Chat System Tests:
            - \`npm run test:chat-routes\` ‚úÖ
            - \`npm run test:chat-system\` ‚úÖ 
            - \`npm run test:chat-integration\` ‚úÖ
            
            Coverage report uploaded as artifact.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    permissions:
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level moderate
          # Add --fix if you want to auto-fix issues (be careful in CI)

      - name: Run npm audit for vulnerabilities
        run: |
          echo "Checking for known vulnerabilities..."
          npm audit --json > audit-results.json || true
          
      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: audit-results.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    name: Build Application
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --production=false
          echo "Dependencies installed successfully"

      - name: Build application
        run: |
          npm run build --if-present
          echo "Build completed successfully"

      - name: Remove dev dependencies for production
        run: |
          npm ci --production=true --ignore-scripts
          npm prune --production

      - name: Create deployment package
        run: |
          # Create a clean deployment package
          mkdir -p deployment-package
          
          # Copy necessary files for production
          cp -r node_modules deployment-package/
          cp package*.json deployment-package/
          cp -r controllers deployment-package/ 2>/dev/null || echo "controllers not found"
          cp -r routes deployment-package/ 2>/dev/null || echo "routes not found"
          cp -r models deployment-package/ 2>/dev/null || echo "models not found"
          cp -r MessageSystem deployment-package/ 2>/dev/null || echo "MessageSystem not found"
          cp -r middleware deployment-package/ 2>/dev/null || echo "middleware not found"
          cp -r config deployment-package/ 2>/dev/null || echo "config not found"
          cp -r public deployment-package/ 2>/dev/null || echo "public not found"
          cp -r views deployment-package/ 2>/dev/null || echo "views not found"
          cp app.js deployment-package/ 2>/dev/null || echo "app.js not found"
          cp server.js deployment-package/ 2>/dev/null || echo "server.js not found"
          
          # Copy other necessary files
          cp .env* deployment-package/ 2>/dev/null || echo "env files not found"
          cp web.config deployment-package/ 2>/dev/null || echo "web.config not found"

      - name: Zip artifact for deployment
        run: |
          cd deployment-package
          zip -r ../release.zip ./*
          cd ..
          ls -la release.zip

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip
          retention-days: 30

  deploy:
    runs-on: ubuntu-latest
    needs: build
    name: Deploy to Azure
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    # Only deploy on push to main/Prod branches, not on PRs
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/Prod')

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: |
          unzip release.zip
          ls -la
          echo "Files extracted for deployment"

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_0662F3EAF1F84C149478D55938133062 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_FFDFA368CCDA474489123A0B1FC5A5ED }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_73286F582C5146B9B416732A70674AC2 }}

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'TableWhispersBack'
          slot-name: 'Production'
          package: .

      - name: Post-deployment verification
        run: |
          echo "Deployment completed successfully!"
          echo "Application URL: ${{ steps.deploy-to-webapp.outputs.webapp-url }}"
          
          # Optional: Add a health check
          # curl -f ${{ steps.deploy-to-webapp.outputs.webapp-url }}/health || echo "Health check failed, but deployment continued"

  notify:
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    name: Notify Deployment Status
    if: always()

    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "üöÄ Deployment successful!"
          echo "All tests passed and application deployed to Azure"
          
      - name: Notify failure
        if: needs.test.result == 'failure' || needs.build.result == 'failure' || needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Pipeline failed!"
          echo "Tests: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Deploy: ${{ needs.deploy.result }}"